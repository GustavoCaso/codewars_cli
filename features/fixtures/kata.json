{
  "success": true,
  "name": "Scrabble best word",
  "slug": "scrabble-best-word",
  "href": "/kata/scrabble-best-word",
  "description": "You're playing to scrabble.\nBut counting points is hard.\n\nYou decide to create a little script to calculate the best possible value.\n\nThe function takes two arguments :<br/>\n<ol>\n  <li>`points` : an array of integer representing for each letters from A to Z  the points that it pays</li>\n  <li>`words` : an array of strings, uppercase </li>\n</ol>\n<br/>\nYou must return the index of the shortest word which realize the highest score.\n\nWhen there are two or more words having same score, then the index of the smallest word should be returned\n\nIf also the length is the same, then return the index of the first one.",
  "author": "",
  "rank": -6,
  "averageCompletion": null,
  "tags": [
    "Algorithms",
    "Arrays",
    "Data Types"
  ],
  "session": {
    "projectId": "5696941dd73c784dcd00003f",
    "solutionId": "5696941dd73c784dcd000041",
    "setup": "def get_best_word(points, words)\n  #your code here\nend",
    "exampleFixture": "points = [1,3,3,2,1,4,2,4,1,8,10,1,2,1,1,3,8,1,1,1,1,4,10,10,10,10]\n\nTest.assert_equals(get_best_word(points, [\"WHO\",\"IS\",\"THE\",\"BEST\",\"OF\",\"US\"]), 0)\nTest.assert_equals(get_best_word(points, [\"AABCDEF\", \"WHO\",\"IS\",\"THE\",\"BEST\",\"OF\",\"US\"]), 1)\nTest.assert_equals(get_best_word(points, [\"NOQ\",\"TXAY\",\"S\",\"OM\",\"ESFT\",\"CJUKQ\",\"QL\",\"QO\",\"ASTK\",\"Y\"]), 5)\nTest.assert_equals(get_best_word(points, [\"N\",\"AO\",\"TQGZW\",\"P\",\"OBTP\",\"CLWXB\",\"Y\",\"JQGFJ\",\"Q\",\"RP\",\"OC\",\"MRQCZ\",\"ZWN\",\"ZRT\",\"OIRYH\",\"GWPMSZP\",\"LQRYUKQ\",\"LBM\",\"LFEI\",\"VHUX\",\"RTALLIC\",\"JEMUPS\",\"XUW\",\"X\",\"ZLXFMWS\",\"LFAGR\",\"HJ\",\"RTUAI\",\"JRBNG\",\"ZUYSC\",\"CIEYV\",\"FUY\",\"B\",\"EJS\",\"CINBTQS\",\"JEAC\",\"JX\",\"LLILSEK\",\"W\",\"KLUV\"]), 16)\nTest.assert_equals(get_best_word(points, [\"SVWLIDP\",\"FCPKTHW\",\"EREMN\",\"NFEF\",\"PQ\",\"FSC\",\"ZYPOSXJ\",\"BOR\",\"YCGG\",\"RC\",\"DVPE\",\"VAOE\",\"OIGK\",\"OTQE\",\"REJFUFD\",\"FVBCSSB\",\"VHJ\",\"BEC\",\"MWZQ\",\"WX\",\"L\",\"ZPCB\",\"JKLHE\",\"RYFTY\",\"NKP\",\"ID\",\"O\",\"KA\",\"VRXX\",\"NTDB\",\"OERKPC\",\"YFLUI\",\"SKQCJ\",\"PXDSW\",\"ITYWD\",\"TC\",\"LOIDQEJ\",\"NE\",\"YND\",\"VJHOCEC\",\"RPRANZ\",\"BQ\",\"STM\",\"RGVBFW\",\"SMWUYLW\",\"KT\",\"SXHY\",\"XCE\",\"T\",\"SC\",\"UDJU\",\"CHDR\",\"UGXNQ\",\"CQOOBA\",\"O\",\"NWW\",\"V\",\"L\",\"BAQ\",\"AZN\",\"LBTR\",\"N\",\"QSURR\",\"KADPH\",\"M\",\"LCBEAKM\",\"ZHEVXS\",\"F\",\"TVAIQCY\",\"MF\",\"KCI\",\"YQ\",\"RCG\",\"AKYPCP\",\"WJXG\",\"RQXOI\",\"SJI\",\"TWXZ\",\"J\",\"HIKCGHV\",\"EAAXGG\",\"AETSH\",\"EO\",\"BUET\",\"TDIQCO\",\"TKL\",\"FJCRY\",\"ZHAJLK\",\"OLMCVA\",\"F\"]), 6)",
    "code": null
  }
}
